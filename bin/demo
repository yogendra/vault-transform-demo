#!/usr/bin/env bash

set -Eeuo pipefail
COMMAND=$(basename $0)
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SCRIPT=${BASH_SOURCE[0]}

export PROJECT_DIR=${PROJECT_DIR:-$(cd $SCRIPT_DIR/..; pwd)}
export DOCKER_COMPOSE_DIR=$PROJECT_DIR/docker-compose
export DOCKER_COMPOSE_FILE=${DOCKER_COMPOSE_FILE:-$DOCKER_COMPOSE_DIR/docker-compose.yml}
export DOCKER_REGISTRY=${DOCKER_REGISTRY:-yogendra}
export UI_IMAGE_NAME=yb-vault-demo-transform-demo-ui
export API_IMAGE_NAME=yb-vault-demo-transform-demo-api
export VAULT_INIT_IMAGE_NAME=yb-vault-demo-vault-init

function banner(){
    echo ================================================================================
    echo "$@"
    echo ================================================================================
}

function help(){
  banner Demo Env Information
  cat <<EOF
Demo of Hashicorp Vault and YugabyteDB. This demo covers, dynamic database credentials provisioning,
Format preserving encryption (FPE), masking, etc.
More information visit https://developer.hashicorp.com/vault/ and https://docs.yugabyte.com/

Application and Consoles
========================
Vault UI       : http://localhost:8200
YugabyteDB UI  : http://localhost:15433
Demo App UI    : http://localhost:8080
SQLPad         : http://localhost:3000

Useful Commands
===============
bin/demo apps-start        - start infra containers
bin/demo add-sample-data   - add sample data
bin/demo build-containers  - build containers
bin/demo help              - this screen
bin/demo dc                - run docker-compose commands
bin/demo infra-start       - start infra containers
bin/demo prepare           - prepare for demoe. pull images for running demo
bin/demo sample-data-clear - clear sample data
bin/demo sample-data-show  - show sample data
bin/demo sample-data-add   - add sample data
bin/demo start             - start infra and apps
bin/demo stop              - stop demo containers
bin/demo vault-shell       - vault shell
bin/demo watch             - look are container logs
bin/demo ysqlsh            - start the YSQLSH shell
bin/demo yugabtyedb-shell  - yugabytedb shell
EOF
}
function dc(){
  docker compose -f $DOCKER_COMPOSE_FILE "$@"
}
function ysqlsh(){
  dc exec -e PGPASSWORD=yugabyte -it yugabytedb-1 ysqlsh -h yugabytedb -U yugabyte -d demo -w "$@"
}
function vault-shell(){
  dc exec -e VAULT_TOKEN=$VAULT_TOKEN -e VAULT_ADDR=http://localhost:8200 -it vault sh -l
}
function yugabytedb-shell(){
  dc exec -e PGPASSWORD=yugabyte -e PGHOST=yugabytedb-1.local -it yugabytedb-1 bash -l 
}
function start(){
  set +ex
  banner Start
  infra-start
  apps-start
  sleep 10
  help
}

function status(){
  banner Status
  dc ps
}
function stop(){
    set +ex
    banner Stop
    dc down --remove-orphans -v
    rm $DOCKER_COMPOSE_DIR/scripts/vault.json $DOCKER_COMPOSE_DIR/vault-agent/token $DOCKER_COMPOSE_DIR/vault-agent/role_id $DOCKER_COMPOSE_DIR/vault-agent/secret_id || echo "no leftovers"
}

function infra-start(){
  banner Start Infra
  if [[ -z $VAULT_LICENSE ]]; then
    echo "VAULT_LICENSE environment variable not set. Set it by running export VAULT_LICENSE=...."
    echo "You require a license to run this. Contact Hashicorp for a vault license."
    exit 1
  fi
  dc up vault-agent sqlpad -d $@
}
function apps-start(){
  banner Start Apps
  dc up transform-demo-api transform-demo-ui -d $@
}
function container-build(){
  docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_REGISTRY/$UI_IMAGE_NAME:latest --push $PROJECT_DIR/demo-ui
  docker buildx build --platform linux/arm64,linux/amd64 -t $DOCKER_REGISTRY/$API_IMAGE_NAME:latest --push $PROJECT_DIR/demo-api
  docker buildx build --platform linux/arm64,linux/amd64 --build-arg VAULT_IMAGE=hashicorp/vault:1.15 -t $DOCKER_REGISTRY/$VAULT_INIT_IMAGE_NAME:1.15 --push $PROJECT_DIR/docker-compose/vault-init
}

function sample-data-add(){
  banner Add Sample Data
  curl 'http://localhost:8080/encrypt?transit=1&username=Yogi%20transit&password=passw0rd&email=YogiTransformation@Example.com&creditcard=1111-2222-3333-4444' -X POST
  curl 'http://localhost:8080/encrypt?transformation=1&username=Yogi%20transformation&password=passw0rd&email=YogiTransformation@Example.com&creditcard=2111-2222-3333-4444' -X POST
  curl 'http://localhost:8080/encrypt?simple-transformation=1&username=Yogi%20simple-transformation&password=passw0rd&email=YogiTransformation@Example.com&creditcard=3111-2222-3333-4444' -X POST
  curl 'http://localhost:8080/encrypt?simplest-transformation=1&username=Yogi%20simplest-transformation&password=passw0rd&email=YogiTransformation@Example.com&creditcard=4111-2222-3333-4444' -X POST
  curl 'http://localhost:8080/encrypt?default-tokenization=1&username=Yogi%20default-tokenization&password=passw0rd&email=YogiTransformation@Example.com&creditcard=2111-5222-3333-4444' -X POST
  curl 'http://localhost:8080/encrypt?convergent-tokenization=1&username=Yogi%20convergent-tokenization&password=passw0rd&email=YogiTransformation@Example.com&creditcard=6111-2222-3333-4444' -X POST
}
function sample-data-clear(){
  banner Truncate data in users_tokenization table
  ysqlsh -c 'TRUNCATE TABLE users_tokenization;'
}
function sample-data-show(){
  banner Truncate data in users_tokenization table
  ysqlsh -c 'SELECT * from users_tokenization;'
}
function watch(){
    banner Watch logs
    dc logs -f "$@"
}

function prepare(){
  dc pull
}


OP=${1:-start}; shift
$OP "$@"
