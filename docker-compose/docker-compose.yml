version: "3.7"
name: vault-transform-demo

services:
  ## Frontend UI
  transform-demo-ui:
    image: nicklhw/transform-demo-ui
    container_name: transform-demo-ui
    restart: always
    build:
      context: ../demo-ui
    ports:
      - "8080:8080"
    environment:
      - API_ADDRESS=http://transform-demo-api:7070
    networks:
      - vault-demo
    depends_on:
      - transform-demo-api

  ## Backend API
  transform-demo-api:
    image: nicklhw/transform-demo-api
    container_name: transform-demo-api
    restart: always
    build:
      context: ../demo-api
    ports:
      - "7070:7070"
    environment:
      - SPRING_CLOUD_VAULT_HOST=vault-agent
      - SPRING_DATASOURCE_URL=jdbc:postgresql://yugabytedb:5433/demo
    networks:
      - vault-demo
    depends_on:
      - vault-agent

  ## Vault Agent - sidecar proxy to vault
  vault-agent:
    image: hashicorp/vault:1.15
    restart: always
    volumes:
      - ./vault-agent/:/vault/config
    ports:
      - "8100:8100/tcp"
    cap_add:
      - IPC_LOCK
    container_name: vault-agent
    entrypoint: "vault agent -config=/vault/config/agent.hcl"
    networks:
      - vault-demo
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://vault:8100
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10
    depends_on:
      vault-init:
        condition: service_completed_successfully

  ## Vault Initialization Job
  vault-init:
    image: yogendra/vault-iniit:1.15
    build:
      context: ./vault-init
      dockerfile: Dockerfile
      args:
        - VAULT_IMAGE=hashicorp/vault:1.15
    restart: on-failure
    volumes:
      - ./:/vault
    container_name: vault-init
    entrypoint: ./init.sh
    working_dir: /vault/scripts
    environment:
      - VAULT_LICENSE=${VAULT_LICENSE}
      - VAULT_ADDR=http://vault:8200
      - TERM=xterm-256color
      - SKIP_DOCKER_COMPOSE=1
    networks:
      - vault-demo
    depends_on:
      vault:
        condition: service_healthy

  ## Vault service
  vault:
    depends_on:
      yugabytedb-init:
        condition: service_completed_successfully
    image: hashicorp/vault-enterprise:1.15-ent
    restart: always
    volumes:
      - ./vault:/vault/config:rw
      - ./vault/audit_logs:/var/log/vault:rw
      - /vault/data
    ports:
      - "8200:8200/tcp"
    cap_add:
      - IPC_LOCK
    container_name: vault
    entrypoint: "vault server -config=/vault/config"
    environment:
      - VAULT_LICENSE=${VAULT_LICENSE}
    networks:
      - vault-demo
    healthcheck:
      test:
        - CMD-SHELL
        - nc -zvw1 vault 8200
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10

  ## YugabyteDB Initialization Job
  yugabytedb-init:
    image: yogendra/yugabyte:2.18.4.0-b52
    container_name: yugabytedb-init
    restart: on-failure
    environment:
      - YSQL_USER=demo
      - YSQL_PASSWORD=passw0rd
      - YSQL_DB=demo
    volumes:
      - ./yugabytedb/init.sql:/init.sql
    command:
      - bash
      - -c
      - |
        echo -n "Waiting for yugabytedb to be ready"
        export PGPASSWORD=$$YSQL_PASSWORD
        export PGUSER=$$YSQL_USER
        export PGDATABASE=$$YSQL_DB
        export PGHOST=yugabytedb
        export PGPORT=5433

        until postgres/bin/pg_isready -t 1  &> /dev/null; do echo -n '.'; done
        echo " OK"
        bin/ysqlsh -c 'select version(); select * from yb_servers(); select * from inet_server_addr();'
        bin/ysqlsh -a -f /init.sql
    networks:
      - vault-demo
    depends_on:
      yugabytedb:
        condition: service_healthy
  ## YugabyteDB Database LoadBalancer
  yugabytedb:
    image: nginx:1.25.3
    container_name: yugabytedb
    hostname: yugabytedb
    restart: always
    volumes:
      - ./yugabytedb/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "5433:5433/tcp"
      - "15433:15433/tcp"
      - "7000:7000/tcp"
      - "9000:9000/tcp"
      - "9042:9042/tcp"
    networks:
      - vault-demo
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://yugabytedb:15433
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10
    depends_on:
      yugabytedb-1:
        condition: service_healthy
      yugabytedb-2:
        condition: service_healthy
      yugabytedb-3:
        condition: service_healthy

  ## YugabyteDB Node 1
  yugabytedb-1:
    image: yogendra/yugabyte:2.18.4.0-b52
    container_name: yugabytedb-1
    hostname: yugabytedb-1.local
    volumes:
      - yugabytedb-1:/root/var
    command: bin/yugabyted start --fault_tolerance=zone --background=false --cloud_location local.docker.zone1 --advertise_address yugabytedb-1.local
    restart: always
    environment:
      - YSQL_USER=demo
      - YSQL_PASSWORD=passw0rd
      - YSQL_DB=demo
    networks:
      - vault-demo
    healthcheck:
      test:
        - CMD-SHELL
        - PGPASSWORD=yugabyte postgres/bin/pg_isready -t 1 -p 5433 -U yugabyte -d yugabyte -q -h yugabytedb-1.local
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10

  ## YugabyteDB Node 2
  yugabytedb-2:
    image: yogendra/yugabyte:2.18.4.0-b52
    container_name: yugabytedb-2
    hostname: yugabytedb-2.local
    volumes:
      - yugabytedb-2:/root/var
    command: bin/yugabyted start --fault_tolerance=zone --background=false --cloud_location local.docker.zone2 --advertise_address yugabytedb-2.local --join=yugabytedb-1.local
    restart: always
    networks:
      - vault-demo
    depends_on:
      yugabytedb-1:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - PGPASSWORD=yugabyte postgres/bin/pg_isready -t 1 -p 5433 -U yugabyte -d yugabyte -q -h yugabytedb-2.local
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10

  ## YugabyteDB Node 3
  yugabytedb-3:
    image: yogendra/yugabyte:2.18.4.0-b52
    container_name: yugabytedb-3
    hostname: yugabytedb-3.local
    volumes:
      - yugabytedb-3:/root/var
    command: bin/yugabyted start --fault_tolerance=zone --background=false --cloud_location local.docker.zone3 --advertise_address yugabytedb-3.local --join=yugabytedb-2.local
    restart: always
    networks:
      - vault-demo
    depends_on:
      yugabytedb-1:
        condition: service_healthy
      yugabytedb-2:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - PGPASSWORD=yugabyte postgres/bin/pg_isready -t 1 -p 5433 -U yugabyte -d yugabyte -q -h yugabytedb-3.local
      start_period: 3s
      interval: 2s
      timeout: 1s
      retries: 10

  ## SQLPage - Browser based Sql / Query console
  sqlpad:
    # To use Dockerfile at root of this project, use build instead of image
    # build: ../../
    image: sqlpad/sqlpad:6.11.2
    hostname: "sqlpad"
    container_name: sqlpad
    ports:
      - "3000:3000"
    environment:
      SQLPAD_ADMIN: "admin"
      SQLPAD_ADMIN_PASSWORD: "passw0rd"
      SQLPAD_APP_LOG_LEVEL: info
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_SEED_DATA_PATH: /etc/sqlpad/seed-data
    volumes:
      - ./sqlpad/seed-data:/etc/sqlpad/seed-data
    networks:
      - vault-demo

volumes:
  yugabytedb-1:
  yugabytedb-2:
  yugabytedb-3:

networks:
  vault-demo:
